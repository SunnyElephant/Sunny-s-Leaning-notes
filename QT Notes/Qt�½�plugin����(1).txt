1.在调用插件的程序里面加入“接口头文件”（testSQLiteinterface.h）。
接口头文件实例：
#ifndef TESTSQLITEINTERFACE_H
#define TESTSQLITEINTERFACE_H

#include <QString>

class GuiClientInterface
{
public:
    virtual ~GuiClientInterface() {}
    virtual QString doSQLite(const QString message,...) = 0;

};


QT_BEGIN_NAMESPACE

#define GuiClientInterface_iid "org.qt-project.Qt.Examples.GuiClientInterface"

Q_DECLARE_INTERFACE(GuiClientInterface, GuiClientInterface_iid)
QT_END_NAMESPACE

#endif // TESTSQLITEINTERFACE_H


在被调用的接口 .pro文件中加入INCLUDEPATH    += ../echowindow（这个是接口头文件的路径，也可以直接把头文件复制过来使用）

在插件中继承这个接口：
class PluginguiclientPlugin : public QObject, GuiClientInterface
{
    Q_OBJECT
    Q_PLUGIN_METADATA(IID "org.qt-project.Qt.Examples.GuiClientInterface")
    Q_INTERFACES(GuiClientInterface)

public:
    PluginguiclientPlugin();
    QString showGuiClient(const QString message,...);
};

#endif // PLUGINGUICLIENT_PLUGIN_H



再在调用程序里面加入这么一个加载函数：
//! 这里加载插件功能
bool EchoWindow::loadPlugin()
{
    QDir pluginsDir(qApp->applicationDirPath());
#if defined(Q_OS_WIN)
    if (pluginsDir.dirName().toLower() == "debug" || pluginsDir.dirName().toLower() == "release")
        pluginsDir.cdUp();
#elif defined(Q_OS_MAC)
    if (pluginsDir.dirName() == "MacOS") {
        pluginsDir.cdUp();
        pluginsDir.cdUp();
        pluginsDir.cdUp();
    }
#endif
    pluginsDir.cd("plugins");		//放着.dll的目录(这里是在本目录的同级目录)
    foreach (QString fileName, pluginsDir.entryList(QDir::Files)) {
        QPluginLoader pluginLoader(pluginsDir.absoluteFilePath(fileName));
        QObject *plugin = pluginLoader.instance();
        if (plugin) {
            pluginguiclientPlugin = qobject_cast<PluginguiclientPlugin *>(plugin);		    //pluginguiclientPlugin是 PluginguiclientPlugin *类型
            if (pluginguiclientPlugin)
                return true;
        }
    }

    return false;
}


然后这个插件就搭建好了！