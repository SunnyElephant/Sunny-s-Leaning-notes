    const int buffer=256;  //声明常量buffer,且必须在定义时初始化
    const double *point;   //声明常量指针*point，*point不可变，但point的值可以改变
    int const buffer=256;  //声明常量buffer
    double *const point;   //声明的point是常量，*point可变，但point的值不可以改变，point不是外部的，必须在声明初始化常量对象。可改为：
    double aa = 123.45;
    double *const point = &aa;


int b = 500; 
const int* a = &b           [1] 
int const *a = &b           [2] 
int* const a = &b           [3] 
const int* const a = &b     [4] 
如果你能区分出上述四种情况，那么，恭喜你，你已经迈出了可喜的一步。不知道，也没关系，我们可以参考《Effective c++》Item21上的做法，如果const位于星号的左侧，则const就是用来修饰指针所指向的变量，即指针指向为常量；如果const位于星号的右侧，const就是修饰指针本身，即指针本身是常量。因此，[1]和[2]的情况相同，都是指针所指向的内容为常量（const放在变量声明符的位置无关），这种情况下不允许对内容进行更改操作，如不能*a = 3 ；[3]为指针本身是常量，而指针所指向的内容不是常量，这种情况下不能对指针本身进行更改操作，如a++是错误的；[4]为指针本身和指向的内容均为常量。 