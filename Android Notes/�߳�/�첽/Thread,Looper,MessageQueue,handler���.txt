请看这一段源码：
Looper.java：

[java] view plaincopy
private static final ThreadLocal sThreadLocal = new ThreadLocal();  
public static final void prepare() {  
        if (sThreadLocal.get() != null) {  
            throw new RuntimeException("Only one Looper may be created per thread");  
        }  
        sThreadLocal.set(new Looper());  
}  
所以一个Thread里只能有一个Looper，否则就会出现运行时错误。又因为一个Looper只对应一个消息循环，所以一个线程只有一个消息循环。


Looper.java:

final MessageQueue mQueue;  
private Looper() {  
        mQueue = new MessageQueue();  
        mRun = true;  
        mThread = Thread.currentThread();  
    }  
初始化Looper的时候，同时也会创建一个MessageQueue的实例。


Handler.java

[java] view plaincopy
final MessageQueue mQueue;  
 final Looper mLooper;  
public Handler() {  
        if (FIND_POTENTIAL_LEAKS) {  
            final Class<? extends Handler> klass = getClass();  
            if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &&  
                    (klass.getModifiers() & Modifier.STATIC) == 0) {  
                Log.w(TAG, "The following Handler class should be static or leaks might occur: " +  
                    klass.getCanonicalName());  
            }  
        }  
  
        mLooper = Looper.myLooper();  
        if (mLooper == null) {  
            throw new RuntimeException(  
                "Can't create handler inside thread that has not called Looper.prepare()");  
        }  
        mQueue = mLooper.mQueue;  
        mCallback = null;  
}  